/* stylelint-disable */
/* Recommended styles for Splitting */
.splitting .word,
.splitting .char {
  display: inline-block;
}

/* Psuedo-element chars */
.splitting .char {
  position: relative;
}

/**
 * Populate the psuedo elements with the character to allow for expanded effects
 * Set to `display: none` by default; just add `display: block` when you want
 * to use the psuedo elements
 */
.splitting .char::before,
.splitting .char::after {
  content: attr(data-char);
  position: absolute;
  top: 0;
  left: 0;
  visibility: hidden;
  transition: inherit;
  user-select: none;
}

/* Expanded CSS Variables */

.splitting {
  /* The center word index */
  --word-center: calc((var(--word-total) - 1) / 2);

  /* The center character index */
  --char-center: calc((var(--char-total) - 1) / 2);

  /* The center character index */
  --line-center: calc((var(--line-total) - 1) / 2);
}

.splitting .word {
  /* Pecent (0-1) of the word's position */
  --word-percent: calc(var(--word-index) / var(--word-total));

  /* Pecent (0-1) of the line's position */
  --line-percent: calc(var(--line-index) / var(--line-total));
}

.splitting .char {
  /* Percent (0-1) of the char's position */
  --char-percent: calc(var(--char-index) / var(--char-total));

  /* Offset from center, positive & negative */
  --char-offset: calc(var(--char-index) - var(--char-center));

  /* Absolute distance from center, only positive */
  --distance: calc(
      (var(--char-offset) * var(--char-offset)) / var(--char-center)
  );

  /* Distance from center where -1 is the far left, 0 is center, 1 is far right */
  --distance-sine: calc(var(--char-offset) / var(--char-center));

  /* Distance from center where 1 is far left/far right, 0 is center */
  --distance-percent: calc((var(--distance) / var(--char-center)));
}

// effects
// [data-effect="slide-in"] .char {

//   animation: slide-in .6s cubic-bezier(.5, 0, .5, 1) both;
//   animation-delay: calc(3ms * var(--char-index) + 1000ms );
// }


// @keyframes slide-in {
//   from {
//     transform: translateY(1.5em);
//     opacity: 0;
//   }
// }

.slide-vertical,
.slide-horizontal {

  .word {
    overflow: hidden;
    color: #000;
    clip-path: polygon(0 100%, 100% 100%, 100% 120%, 0% 100%);
    transition: clip-path 0.9s ease;
    transition-delay: calc( 0.05s + ( 0.21s * ( var(--line-index)) ) );
  }

  &.show .word {
    clip-path: polygon(0 100%, 100% 100%, 100% 0, 0 0);
  }
  // &:hover .word:after {
  //   transition-delay: calc( 0.02s * ( var(--char-index)) );
  // }
}

// .slide-vertical {
//   .char:before { transform: translateY(-100%); }
//   &:hover .char:before { transform: translateY(0%); }
//   &:hover .char:after { transform: translateY(100%); }
// }
